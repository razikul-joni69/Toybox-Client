const Blogs = () => {
    document.title = "TOYBOX | Blogs";
    return (
        <div className="container mx-auto space-y-5">
            <div>
                <h3 className="text-2xl font-bold mb-3">
                    What is an access token and refresh token? How do they work
                    and where should we store them on the client-side?
                </h3>
                <p className="text-lg">
                    Access tokens and refresh tokens are used to authenticate
                    users and provide secure access to web APIs. Here Access
                    tokens are short-lived and are used to access resources on
                    behalf of a user. Whereas Refresh tokens are long-lived and
                    can be used to obtain new access tokens when they expire.
                    <br />
                    Access tokens are typically generated by the authorization
                    server when a user authenticates with a client application.
                    They are typically used to access protected resources, such
                    as user data or files. Access tokens are typically
                    short-lived, expiring after a few hours or days. This helps
                    to protect users' security, as it limits the amount of time
                    that an attacker has to use an access token if it is
                    compromised. Whereas Refresh tokens are typically generated
                    by the authorization server when a user grants a client
                    application access to their resources. They are typically
                    longer-lived than access tokens, expiring after a few weeks
                    or months. This allows users to access protected resources
                    without having to re-authenticate with the client
                    application every time their access token expires.
                    <br />
                    Access tokens should be stored on the client-side in memory
                    or local storage. But it is important to note that storing
                    access tokens in local storage can make them vulnerable to
                    cross-site scripting attacks. Refresh tokens should be
                    stored securely on the client-side using HttpOnly cookies or
                    other secure storage mechanisms
                </p>
            </div>
            <div>
                <h3 className="text-2xl font-bold mb-3">
                    Compare SQL and NoSQL databases?
                </h3>
                <p className="text-lg">
                    SQL and NoSQL databases are two different types of databases
                    that are used for storing and managing data. SQL databases
                    are relational databases that store data in tables with
                    fixed rows and columns. They use a structured query language
                    to access and manipulate data. NoSQL databases, on the other
                    hand, are non-relational databases that store data in a
                    variety of formats such as JSON documents, key-value pairs,
                    wide column stores, and graphs. They do not use SQL to
                    access and manipulate data. <br />
                    There are several differences between SQL and NoSQL
                    databases. SQL databases are primarily called Relational
                    Databases , whereas NoSQL databases are primarily called
                    non-relational or distributed databases1. SQL databases are
                    table-based, while NoSQL databases can be document-oriented,
                    key-value pairs, or graph2. SQL databases feature tables
                    while NoSQL databases are often document-based3. SQL
                    databases contain structured data and can perform an
                    analysis using a relational model. A NoSQL database contains
                    unstructured data, which means it cannot be analyzed through
                    predefined models
                    <br />
                    SQL databases are typically used for applications that
                    require complex queries and transaction management. For
                    example, SQL databases are often used for financial
                    applications, customer relationship management systems, and
                    enterprise resource planning systems.
                    <br />
                    NoSQL databases are typically used for applications that
                    require high performance and scalability. For example, NoSQL
                    databases are often used for web applications, mobile apps,
                    and big data analytics.
                </p>
            </div>
            <div>
                <h3 className="text-2xl font-bold mb-3">
                    What is express js? What is Nest JS?
                </h3>
                <p className="text-lg">
                    Express.js is a minimal and flexible Node.js web application
                    framework that provides a robust set of features for
                    building web applications. It is asynchronous in nature,
                    which allows you to execute multiple operations
                    independently. <br />
                    Whereas NestJS is another popular framework. NestJS is built
                    on top of common Node.js frameworks like Express and
                    Fastify. Nest.js is a TypeScript framework that builds on
                    top of Express.js and adds additional features such as
                    dependency injection, a modular architecture, and an
                    intuitive CLI. It is designed to be a more robust and
                    scalable alternative to Express.js.
                </p>
            </div>
            <div>
                <h3 className="text-2xl font-bold mb-3">
                    What is MongoDB aggregate and how does it work?
                </h3>
                <p className="text-lg">
                    Aggregation in MongoDB is the process of selecting data from
                    a collection and returning computed results. It is a
                    powerful tool that allows you to process and analyze data in
                    MongoDB. It is a pipeline-based system, which means that you
                    can chain together multiple operations to perform complex
                    queries. Aggregation pipelines can be used to perform a wide
                    variety of tasks, and they are a powerful tool for
                    processing and analyzing data in MongoDB.
                </p>
            </div>
        </div>
    );
};

export default Blogs;
